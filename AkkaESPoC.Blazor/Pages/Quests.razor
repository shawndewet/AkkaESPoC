@page "/quests"
@using Akka.Actor
@using Akka.Hosting
@using AkkaESPoC.Shared
@using AkkaESPoC.Shared.Queries
@using AkkaESPoC.Shared.Sharding
@using Microsoft.AspNetCore.SignalR.Client
@inject ActorRegistry registry
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject AkkaESPoC.Blazor.Hubs.SignalRConnectionList SignalRConnectionList
@implements IAsyncDisposable

<PageTitle>Quests</PageTitle>

<h1>Quests</h1>
@if (IsConnected)
{
    <p>QuestHub Connected</p>
}
else
{
    <p>QuestHub NOT Connected</p>
}
<p>@SignalRConnectionList.Count connections</p>
@if (QuestDataList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var quest in QuestDataList)
    {
        <QuestComponent Quest="@quest" />
    }
}

@code {
    private HubConnection? hubConnection;

    public IList<QuestData> QuestDataList { get; set; } = Array.Empty<QuestData>();

    protected override async Task OnInitializedAsync()
    {
        var _indexActor = registry.Get<QuestIndexMarker>();
        var quests = await _indexActor.Ask<FetchAllQuestsResponse>(FetchAllQuests.Instance, TimeSpan.FromSeconds(5));

        QuestDataList = quests.Quests.ToList();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/questhub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            jsRuntime.InvokeVoidAsync("console.log", encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("AddQuest", (questData) =>
        {
            jsRuntime.InvokeVoidAsync("console.log", "AddQuest " + questData);
            //QuestDataList.Add(questData);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
